{"version":3,"sources":["App.js","index.js"],"names":["require","config","contractAddress","App","useState","currentAccount","setCurrentAccount","message","setMessage","allWaves","setAllWaves","nbWaves","setNbWaves","contractAbi","abi","getTextboxValue","e","a","target","value","wave","window","ethereum","preventDefault","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","getTotalWaves","gasLimit","waveTxn","console","log","hash","wait","countWaves","count","toNumber","getAllWaves","waves","wavesCleaned","map","address","waver","timestamp","Date","test","sort","b","useEffect","onNewWave","from","prevState","on","off","checkIfWalletIsConnected","request","method","accounts","length","account","connectWallet","alert","disconnectWallet","className","action","onSubmit","type","placeholder","required","onChange","onClick","substring","index","key","style","backgroundColor","marginTop","padding","color","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.23af6064.chunk.js","sourcesContent":["import \"./App.css\";\r\nimport * as React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport abi from \"./abi/WavePortal.json\";\r\nrequire(\"dotenv\").config();\r\n\r\nconst contractAddress = \"0x6b3248522e754DCb91b03A22bD55De4f15E1E20B\";\r\n\r\nexport default function App() {\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [allWaves, setAllWaves] = useState([]);\r\n  const [nbWaves, setNbWaves] = useState(0);\r\n\r\n  const contractAbi = abi.abi;\r\n\r\n  const getTextboxValue = async (e) => {\r\n    // console.log(e.target.value)\r\n    setMessage(e.target.value);\r\n  };\r\n\r\n  const wave = async (e) => {\r\n    try {\r\n      const { ethereum } = window;\r\n      e.preventDefault();\r\n\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const wavePortalContract = new ethers.Contract(\r\n          contractAddress,\r\n          contractAbi,\r\n          signer\r\n        );\r\n\r\n        let count = await wavePortalContract.getTotalWaves();\r\n        //console.log(\"Retrieved total wave count...\", count.toNumber());\r\n\r\n        /*\r\n         * Execute the actual wave from your smart contract\r\n         */\r\n        const waveTxn = await wavePortalContract.wave(message, {\r\n          gasLimit: 300000,\r\n        });\r\n        console.log(\"Mining...\", waveTxn.hash);\r\n\r\n        await waveTxn.wait();\r\n        //console.log(\"Mined -- \", waveTxn.hash);\r\n\r\n        count = await wavePortalContract.getTotalWaves();\r\n        //console.log(\"Retrieved total wave count...\", count.toNumber());\r\n      } else {\r\n        // console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  };\r\n\r\n  const countWaves = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const wavePortalContract = new ethers.Contract(\r\n          contractAddress,\r\n          contractAbi,\r\n          signer\r\n        );\r\n\r\n        let count = await wavePortalContract.getTotalWaves();\r\n        //setNbWaves(count)\r\n\r\n        setNbWaves(count.toNumber());\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  /*\r\n   * Create a method that gets all waves from your contract\r\n   */\r\n  const getAllWaves = async () => {\r\n    const { ethereum } = window;\r\n\r\n    try {\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const wavePortalContract = new ethers.Contract(\r\n          contractAddress,\r\n          contractAbi,\r\n          signer\r\n        );\r\n        const waves = await wavePortalContract.getAllWaves();\r\n\r\n        const wavesCleaned = waves.map((wave) => {\r\n          return {\r\n            address: wave.waver,\r\n            timestamp: new Date(wave.timestamp * 1000),\r\n            message: wave.message,\r\n            test: \"test\",\r\n          };\r\n        });\r\n        wavesCleaned.sort((a, b) => (a.timestamp < b.timestamp ? 1 : -1));\r\n        setAllWaves(wavesCleaned);\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Listen in for emitter events!\r\n   */\r\n  useEffect(() => {\r\n    getAllWaves();\r\n    let wavePortalContract;\r\n\r\n    const onNewWave = (from, timestamp, message) => {\r\n      //console.log(\"NewWave\", from, timestamp, message);\r\n      setAllWaves((prevState) => [\r\n        ...prevState,\r\n        {\r\n          address: from,\r\n          timestamp: new Date(timestamp * 1000),\r\n          message: message,\r\n        },\r\n      ]);\r\n    };\r\n\r\n    if (window.ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      const signer = provider.getSigner();\r\n\r\n      wavePortalContract = new ethers.Contract(\r\n        contractAddress,\r\n        contractAbi,\r\n        signer\r\n      );\r\n      wavePortalContract.on(\"NewWave\", onNewWave);\r\n    }\r\n\r\n    return () => {\r\n      if (wavePortalContract) {\r\n        wavePortalContract.off(\"NewWave\", onNewWave);\r\n      }\r\n    };\r\n  }, []);\r\n  useEffect(() => {\r\n    countWaves();\r\n  }, []);\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        console.log(\"Make sure you have metamask!\");\r\n        return false;\r\n      } else {\r\n        console.log(\"We have the ethereum object\", ethereum);\r\n      }\r\n\r\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\r\n\r\n      if (accounts.length !== 0) {\r\n        const account = accounts[0];\r\n        console.log(\"Found an authorized account:\", account);\r\n        setCurrentAccount(account);\r\n        return false;\r\n      } else {\r\n        console.log(\"No authorized account found\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Implement your connectWallet method here\r\n   */\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n      }\r\n\r\n      const accounts = await ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n\r\n      //console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const disconnectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        alert(\"Your need to be logged in\");\r\n        return;\r\n      }\r\n\r\n      const accounts = await ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n\r\n      //console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(\"\");\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"mainContainer\">\r\n      <div className=\"dataContainer\">\r\n        <div className=\"header\">👋 Hey there!</div>\r\n\r\n        {/* \r\n        <input\r\n          type=\"text\"\r\n          className=\"message\"\r\n          placeholder=\"Write a message\"\r\n          onChange={getTextboxValue}\r\n        />\r\n\r\n        <button className=\"waveButton\" onClick={wave}>\r\n          Wave at Me\r\n        </button> */}\r\n\r\n        <form action=\"\" className=\"waveForm\" onSubmit={wave}>\r\n          <div className=\"bio\">\r\n            <p>\r\n              I am Malchik and I'm learning solidity tricks ! That's pretty cool\r\n              right?\r\n            </p>\r\n            <p>\r\n              Connect your wallet to Ethereum Rinkeby , write your twitter handle and wave\r\n              at me!\r\n            </p>\r\n            <p>Follow me on Twitter: @0xProudFrog</p>\r\n            {currentAccount ? (\r\n              <p>\r\n                I already received {nbWaves} waves ! What are you waiting for ?\r\n              </p>\r\n            ) : null}\r\n          </div>\r\n          <input\r\n            type=\"text\"\r\n            className=\"waveFormMessage\"\r\n            placeholder=\"Write a message\"\r\n            required\r\n            onChange={getTextboxValue}\r\n          />\r\n\r\n          <button type=\"submit\" className=\"waveButton\">\r\n            Wave at Me\r\n          </button>\r\n        </form>\r\n\r\n        {!currentAccount ? (\r\n          <button className=\"connectButton\" onClick={connectWallet}>\r\n            Connect\r\n          </button>\r\n        ) : (\r\n          <button className=\"connectButton\" onClick={disconnectWallet}>\r\n            <p>\r\n              {currentAccount.substring(0, 4) +\r\n                \"...\" +\r\n                currentAccount.substring(11, 14)}{\" \"}\r\n              - Click to logout\r\n            </p>\r\n          </button>\r\n        )}\r\n\r\n        {currentAccount\r\n          ? allWaves.map((wave, index) => {\r\n              return (\r\n                <div\r\n                  key={index}\r\n                  style={{\r\n                    backgroundColor: \"#333\",\r\n                    marginTop: \"16px\",\r\n                    padding: \"8px\",\r\n                    color: \"white\",\r\n                  }}\r\n                >\r\n                  <div>Address: {wave.address}</div>\r\n                  <div>Time: {wave.timestamp.toString()}</div>\r\n                  <div>Message: {wave.message}</div>\r\n                </div>\r\n              );\r\n            })\r\n          : \"\"}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}